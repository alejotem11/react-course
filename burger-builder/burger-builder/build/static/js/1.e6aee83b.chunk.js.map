{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","ContactData","checkoutSummary","props","react_default","a","createElement","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","errorMsg","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","_callee","event","formData","formElementIdentifier","order","regenerator_default","wrap","_context","prev","next","preventDefault","_this","ings","price","orderData","userId","onOrderBurger","token","stop","this","inputChangedHandler","inputIdentifier","updatedOrderForm","Object","objectSpread","updatedFormElement","target","checkValidity","setState","_this2","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","Input","invalid","changed","bind","disabled","loading","Spinner","React","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/1.e6aee83b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-avOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1whvJ\"};","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = props => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{width: '100%', margin: 'auto'}}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button\r\n        btnType=\"Danger\"\r\n        clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button\r\n        btnType=\"Success\"\r\n        clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../../axios-orders';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport classes from './ContactData.css';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends React.Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        errorMsg: 'Please enter your name',\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Street',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        errorMsg: 'Please enter your street',\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'ZIP Code',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        errorMsg: 'Enter a valid ZIP Code',\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Country',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        errorMsg: 'Please enter your country',\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your E-Mail',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        errorMsg: 'Please enter your email',\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            { value: 'fastest', displayValue: 'Fastest' },\r\n            { value: 'cheapest', displayValue: 'Cheapest' },\r\n          ]\r\n        },\r\n        value: 'cheapest',\r\n        validation: {},\r\n        valid: true,\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  }\r\n\r\n  orderHandler = async event => {\r\n    event.preventDefault(); // To prevent to send a request and reload the page (default in the form elements)\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n    }\r\n    /* Example of the formData result:\r\n    formData = {\r\n      name: 'Alejandro',\r\n      street: 'Carrera 8F',\r\n      zipCode: '1111',\r\n      country: 'Colomgia',\r\n      email: 'alejotem_11@hotmail.com',\r\n      deliveryMethod: 'faster'\r\n    } */\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    }\r\n    /* try {\r\n      // For Firebase is necessary to put the .json at the end of the endpoint.\r\n      // This is going to create the orders node in the database\r\n      const response = await axios.post('/orders.json', order);\r\n      console.log(response);\r\n      this.props.history.push('/');\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    } */\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  }\r\n\r\n  /* To achieve the two way binding in the input elements */\r\n  inputChangedHandler = (inputIdentifier, event) => {\r\n    const updatedOrderForm = {\r\n      ...this.state.orderForm // This is not copying the nested objects, so this is not clonning deeply but then it is just copying the pointers to them, and then if you changed something there you will mutate the original state unfortunately\r\n    };\r\n    // Cloning the nested objects:\r\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n    updatedFormElement.touched = true;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid });\r\n  }\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key]\r\n      })\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map(formElement => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            errorMsg={formElement.config.errorMsg}\r\n            //changed={e => this.inputChangedHandler(formElement.id, e)}\r\n            changed={this.inputChangedHandler.bind(this, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends React.Component {\r\n  // We now manage the state with Redux\r\n  /* state = {\r\n    ingredients: null,\r\n    totalPrice: 0\r\n  } */\r\n\r\n  // *************** Without using Redux *****************\r\n  // We use componentWillMount instead of componentDidMount, so before we render the child components we set the appropriate state\r\n  /* \r\n  componentWillMount () {\r\n    const query = new URLSearchParams(this.props.location.search);\r\n    const ingredients = {};\r\n    let price = 0;\r\n    for (let param of query.entries()) {\r\n      // e.i. param = ['salad', 1]\r\n      if (param[0] === 'price') {\r\n        price = param[1];\r\n      } else {\r\n        ingredients[param[0]] = +param[1]; // +param[1] --> Converting to a number\r\n      }\r\n    }\r\n    this.setState({ ingredients, totalPrice: price });\r\n  }\r\n   */\r\n  // ******************************************************\r\n\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  }\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace('/checkout/contact-data');\r\n  }\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      // const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n      const purchasedRedirect = this.props.purchased && <Redirect to=\"/\" />; // Short-circuit operator\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler} />\r\n          <Route path={this.props.match.path + '/contact-data'} component={ContactData} />\r\n          {/* ************* Without using Redux **************\r\n        // We use \"render\" instead of \"component\" to be able to pass props (ingredients and price) to the ContactData component. But since we don't use \"component\" we don't have access to the Route related props (history, match, location). To fix that we pass the props argument in the arrow function used in \"render\" and pass it to the component\r\n        <Route path={this.props.match.path + '/contact-data'} render={props => (\r\n            <ContactData\r\n              ingredients={this.state.ingredients}\r\n              price={this.state.totalPrice}\r\n              {...props} />\r\n          )} />\r\n        *************************************************/}\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}